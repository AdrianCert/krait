[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "krait-signal"
version = "0.1.0"
description = "signaled property"
authors = [
    { name = "Adrian Valentin Panaintescu", email = "adrian.cert@gmail.com" },
]
maintainers = [
    { name = "Adrian Valentin Panaintescu", email = "adrian.cert@gmail.com" },
    { name = "Vlad Craciun", email = "craciun.vlad@yahoo.ie" },
]
dependencies = []
readme = "readme.md"
requires-python = ">= 3.8"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/krait"]

[dependency-groups]
test = [
    { include-group = "krait-siblings" },
    { include-group = "coverage" },
    "mock",
    "pytest>=8.3.4",
    "pytest-cov>=6; python_version >= '3.9'",
    "pytest-cov<=5; python_version <= '3.8'",
    "hypothesis",
    "pytest-xdist>=3.6.1",
    "pytest-mock>=3.14",
]
ruff = ["ruff>=0.10.0"]
coverage = ["coverage[toml]", "covdefaults"]
dev = [{ include-group = "ruff" }, "pre-commit>=2.21.0", "tox>=4.23.2"]
krait-siblings = ["krait-lib@file:../lib"]

[tool.coverage]
html.show_contexts = true
html.skip_covered = false
run.parallel = true
report.fail_under = 80
paths.source = [
    "src",                     # original location
    ".build/**/site-packages", # installed location
]
run.omit = [
    "tests/*.py", # ignore test files
]
run.plugins = [
    "covdefaults", # provide sensible default settings
]

[tool.ruff]
lint.pydocstyle.convention = "numpy"
lint.extend-select = ["C", "D", "FURB", "I", "N", "PL", "PTH", "SIM"]
lint.extend-ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", #
    "D103", # Missing docstring in public function
    "D105",
    "D401",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"] # No need to docstring on test files

[tool.tox]
requires = ["tox>=4.23.2", "tox-uv>=1.13"]
isolated_build = true
work_dir = ".build"
env_list = ["ruff", "cov-report", "py38", "py39", "py311", "py312", "py313"]

[tool.tox.env_run_base]
description = "run the test with pytest for {env_name}"
package = "wheel"
wheel_build_env = ".pkg"
dependency_groups = ["test"]
set_env.COVERAGE_FILE = { replace = "env", name = "COVERAGE_FILE", default = "{work_dir}{/}.coverage.{env_name}" }
set_env.COVERAGE_FILECOVERAGE_PROCESS_START = "{tox_root}{/}pyproject.toml"
commands = [
    [
        "pytest",
        { replace = "posargs", extend = true, default = [
            # "--durations",
            # "15",
            "-n",
            { replace = "env", name = "PYTEST_XDIST_AUTO_NUM_WORKERS", default = "auto" },
            "--junitxml",
            "{work_dir}{/}.reports{/}junit.{env_name}.xml",
            "--no-cov-on-fail",
            "--cov",
            "krait.signal",
            "--cov",
            "{tox_root}{/}tests",
            "--cov-config",
            "{tox_root}{/}pyproject.toml",
            "--cov-context",
            "test",
            "--cov-report",
            "term-missing:skip-covered",
            "--cov-report",
            "html:{work_dir}{/}.reports{/}coverage-{env_name}",
            "--cov-report",
            "xml:{work_dir}{/}.reports{/}coverage.{env_name}.xml",
            "tests",
        ] },
    ],
]

[tool.tox.env.ruff]
recreate = false
skip_install = true
dependency_groups = ["ruff"]
commands = [
    # commands
    ["ruff", "format", "--check", "."],
    ["ruff", "check", "."],
]

[tool.tox.env.cov-report]
parallel_show_output = true
recreate = false
set_env.COVERAGE_FILE = "{toxworkdir}/.coverage"
skip_install = true
dependency_groups = ["coverage"]
depends = ["py38", "py39", "py311", "py312", "py313"]
commands = [
    [
        "coverage",
        "combine",
    ],
    [
        "coverage",
        "html",
        "-d",
        ".build{/}.reports{/}coverage",
    ],
    [
        "coverage",
        "report",
    ],
]
